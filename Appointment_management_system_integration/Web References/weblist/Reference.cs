//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Appointment_management_system_integration.weblist {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="listSoap", Namespace="NDPL WebService")]
    public partial class list : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetClientIPAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDisplayNamefromActiveDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthenticationfromActiveDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthenticationfromActiveDirectory_testOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEncryptedStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDecryptedStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailswithAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailswithMultipleAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkholidayOperationCompleted;
        
        private System.Threading.SendOrPostCallback add_working_daysOperationCompleted;
        
        private System.Threading.SendOrPostCallback GET_Mail_DEPT_DESGOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmpidNameDeptDesgOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmpidOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsername_onEmpIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_CompanyNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_CompanyShortNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_DomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_Company_LogoOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_Company_PicOperationCompleted;
        
        private System.Threading.SendOrPostCallback Datatable2HTMLtable_newOperationCompleted;
        
        private System.Threading.SendOrPostCallback Encryption64OperationCompleted;
        
        private System.Threading.SendOrPostCallback Decryption64OperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_FinancialYearOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_EmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_UsernameOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_Server_dateOperationCompleted;
        
        private System.Threading.SendOrPostCallback AD_GetReportingManagerOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_Display_Email_Mobile_ADOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailswithAttachment_PriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmails_PriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckHolidayonDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendTrainingRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMeetingRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDisplayNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmails_Testing_InfraOperationCompleted;
        
        private System.Threading.SendOrPostCallback Update_Application_HitsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHOGdetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AD_ReportingMGRDetails_UserIDOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public list() {
            this.Url = global::Appointment_management_system_integration.Properties.Settings.Default.Appointment_management_system_integration_weblist_list;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetClientIPAddressCompletedEventHandler GetClientIPAddressCompleted;
        
        /// <remarks/>
        public event GetDisplayNamefromActiveDirectoryCompletedEventHandler GetDisplayNamefromActiveDirectoryCompleted;
        
        /// <remarks/>
        public event GetAuthenticationfromActiveDirectoryCompletedEventHandler GetAuthenticationfromActiveDirectoryCompleted;
        
        /// <remarks/>
        public event GetAuthenticationfromActiveDirectory_testCompletedEventHandler GetAuthenticationfromActiveDirectory_testCompleted;
        
        /// <remarks/>
        public event GetEncryptedStringCompletedEventHandler GetEncryptedStringCompleted;
        
        /// <remarks/>
        public event GetDecryptedStringCompletedEventHandler GetDecryptedStringCompleted;
        
        /// <remarks/>
        public event SendEmailsCompletedEventHandler SendEmailsCompleted;
        
        /// <remarks/>
        public event SendEmailswithAttachmentCompletedEventHandler SendEmailswithAttachmentCompleted;
        
        /// <remarks/>
        public event SendEmailswithMultipleAttachmentCompletedEventHandler SendEmailswithMultipleAttachmentCompleted;
        
        /// <remarks/>
        public event checkholidayCompletedEventHandler checkholidayCompleted;
        
        /// <remarks/>
        public event add_working_daysCompletedEventHandler add_working_daysCompleted;
        
        /// <remarks/>
        public event GET_Mail_DEPT_DESGCompletedEventHandler GET_Mail_DEPT_DESGCompleted;
        
        /// <remarks/>
        public event getEmpidNameDeptDesgCompletedEventHandler getEmpidNameDeptDesgCompleted;
        
        /// <remarks/>
        public event getEmpidCompletedEventHandler getEmpidCompleted;
        
        /// <remarks/>
        public event getUsername_onEmpIDCompletedEventHandler getUsername_onEmpIDCompleted;
        
        /// <remarks/>
        public event Get_CompanyNameCompletedEventHandler Get_CompanyNameCompleted;
        
        /// <remarks/>
        public event Get_CompanyShortNameCompletedEventHandler Get_CompanyShortNameCompleted;
        
        /// <remarks/>
        public event Get_DomainCompletedEventHandler Get_DomainCompleted;
        
        /// <remarks/>
        public event Get_Company_LogoCompletedEventHandler Get_Company_LogoCompleted;
        
        /// <remarks/>
        public event Get_Company_PicCompletedEventHandler Get_Company_PicCompleted;
        
        /// <remarks/>
        public event Datatable2HTMLtable_newCompletedEventHandler Datatable2HTMLtable_newCompleted;
        
        /// <remarks/>
        public event Encryption64CompletedEventHandler Encryption64Completed;
        
        /// <remarks/>
        public event Decryption64CompletedEventHandler Decryption64Completed;
        
        /// <remarks/>
        public event Get_FinancialYearCompletedEventHandler Get_FinancialYearCompleted;
        
        /// <remarks/>
        public event Get_EmailCompletedEventHandler Get_EmailCompleted;
        
        /// <remarks/>
        public event Get_UsernameCompletedEventHandler Get_UsernameCompleted;
        
        /// <remarks/>
        public event Get_Server_dateCompletedEventHandler Get_Server_dateCompleted;
        
        /// <remarks/>
        public event AD_GetReportingManagerCompletedEventHandler AD_GetReportingManagerCompleted;
        
        /// <remarks/>
        public event Get_Display_Email_Mobile_ADCompletedEventHandler Get_Display_Email_Mobile_ADCompleted;
        
        /// <remarks/>
        public event SendEmailswithAttachment_PriorityCompletedEventHandler SendEmailswithAttachment_PriorityCompleted;
        
        /// <remarks/>
        public event SendEmails_PriorityCompletedEventHandler SendEmails_PriorityCompleted;
        
        /// <remarks/>
        public event CheckHolidayonDateCompletedEventHandler CheckHolidayonDateCompleted;
        
        /// <remarks/>
        public event SendTrainingRequestCompletedEventHandler SendTrainingRequestCompleted;
        
        /// <remarks/>
        public event SendMeetingRequestCompletedEventHandler SendMeetingRequestCompleted;
        
        /// <remarks/>
        public event CheckDisplayNameCompletedEventHandler CheckDisplayNameCompleted;
        
        /// <remarks/>
        public event SendEmails_Testing_InfraCompletedEventHandler SendEmails_Testing_InfraCompleted;
        
        /// <remarks/>
        public event Update_Application_HitsCompletedEventHandler Update_Application_HitsCompleted;
        
        /// <remarks/>
        public event getHOGdetailsCompletedEventHandler getHOGdetailsCompleted;
        
        /// <remarks/>
        public event AD_ReportingMGRDetails_UserIDCompletedEventHandler AD_ReportingMGRDetails_UserIDCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/GetClientIPAddress", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetClientIPAddress() {
            object[] results = this.Invoke("GetClientIPAddress", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientIPAddressAsync() {
            this.GetClientIPAddressAsync(null);
        }
        
        /// <remarks/>
        public void GetClientIPAddressAsync(object userState) {
            if ((this.GetClientIPAddressOperationCompleted == null)) {
                this.GetClientIPAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientIPAddressOperationCompleted);
            }
            this.InvokeAsync("GetClientIPAddress", new object[0], this.GetClientIPAddressOperationCompleted, userState);
        }
        
        private void OnGetClientIPAddressOperationCompleted(object arg) {
            if ((this.GetClientIPAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientIPAddressCompleted(this, new GetClientIPAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/GetDisplayNamefromActiveDirectory", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDisplayNamefromActiveDirectory(string username) {
            object[] results = this.Invoke("GetDisplayNamefromActiveDirectory", new object[] {
                        username});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDisplayNamefromActiveDirectoryAsync(string username) {
            this.GetDisplayNamefromActiveDirectoryAsync(username, null);
        }
        
        /// <remarks/>
        public void GetDisplayNamefromActiveDirectoryAsync(string username, object userState) {
            if ((this.GetDisplayNamefromActiveDirectoryOperationCompleted == null)) {
                this.GetDisplayNamefromActiveDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDisplayNamefromActiveDirectoryOperationCompleted);
            }
            this.InvokeAsync("GetDisplayNamefromActiveDirectory", new object[] {
                        username}, this.GetDisplayNamefromActiveDirectoryOperationCompleted, userState);
        }
        
        private void OnGetDisplayNamefromActiveDirectoryOperationCompleted(object arg) {
            if ((this.GetDisplayNamefromActiveDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDisplayNamefromActiveDirectoryCompleted(this, new GetDisplayNamefromActiveDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/GetAuthenticationfromActiveDirectory", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetAuthenticationfromActiveDirectory(string username, string password) {
            object[] results = this.Invoke("GetAuthenticationfromActiveDirectory", new object[] {
                        username,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthenticationfromActiveDirectoryAsync(string username, string password) {
            this.GetAuthenticationfromActiveDirectoryAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetAuthenticationfromActiveDirectoryAsync(string username, string password, object userState) {
            if ((this.GetAuthenticationfromActiveDirectoryOperationCompleted == null)) {
                this.GetAuthenticationfromActiveDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthenticationfromActiveDirectoryOperationCompleted);
            }
            this.InvokeAsync("GetAuthenticationfromActiveDirectory", new object[] {
                        username,
                        password}, this.GetAuthenticationfromActiveDirectoryOperationCompleted, userState);
        }
        
        private void OnGetAuthenticationfromActiveDirectoryOperationCompleted(object arg) {
            if ((this.GetAuthenticationfromActiveDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthenticationfromActiveDirectoryCompleted(this, new GetAuthenticationfromActiveDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/GetAuthenticationfromActiveDirectory_test", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetAuthenticationfromActiveDirectory_test(string username, string password) {
            object[] results = this.Invoke("GetAuthenticationfromActiveDirectory_test", new object[] {
                        username,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthenticationfromActiveDirectory_testAsync(string username, string password) {
            this.GetAuthenticationfromActiveDirectory_testAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetAuthenticationfromActiveDirectory_testAsync(string username, string password, object userState) {
            if ((this.GetAuthenticationfromActiveDirectory_testOperationCompleted == null)) {
                this.GetAuthenticationfromActiveDirectory_testOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthenticationfromActiveDirectory_testOperationCompleted);
            }
            this.InvokeAsync("GetAuthenticationfromActiveDirectory_test", new object[] {
                        username,
                        password}, this.GetAuthenticationfromActiveDirectory_testOperationCompleted, userState);
        }
        
        private void OnGetAuthenticationfromActiveDirectory_testOperationCompleted(object arg) {
            if ((this.GetAuthenticationfromActiveDirectory_testCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthenticationfromActiveDirectory_testCompleted(this, new GetAuthenticationfromActiveDirectory_testCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/GetEncryptedString", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEncryptedString(string decstr) {
            object[] results = this.Invoke("GetEncryptedString", new object[] {
                        decstr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEncryptedStringAsync(string decstr) {
            this.GetEncryptedStringAsync(decstr, null);
        }
        
        /// <remarks/>
        public void GetEncryptedStringAsync(string decstr, object userState) {
            if ((this.GetEncryptedStringOperationCompleted == null)) {
                this.GetEncryptedStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEncryptedStringOperationCompleted);
            }
            this.InvokeAsync("GetEncryptedString", new object[] {
                        decstr}, this.GetEncryptedStringOperationCompleted, userState);
        }
        
        private void OnGetEncryptedStringOperationCompleted(object arg) {
            if ((this.GetEncryptedStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEncryptedStringCompleted(this, new GetEncryptedStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/GetDecryptedString", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDecryptedString(string encstr) {
            object[] results = this.Invoke("GetDecryptedString", new object[] {
                        encstr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDecryptedStringAsync(string encstr) {
            this.GetDecryptedStringAsync(encstr, null);
        }
        
        /// <remarks/>
        public void GetDecryptedStringAsync(string encstr, object userState) {
            if ((this.GetDecryptedStringOperationCompleted == null)) {
                this.GetDecryptedStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDecryptedStringOperationCompleted);
            }
            this.InvokeAsync("GetDecryptedString", new object[] {
                        encstr}, this.GetDecryptedStringOperationCompleted, userState);
        }
        
        private void OnGetDecryptedStringOperationCompleted(object arg) {
            if ((this.GetDecryptedStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDecryptedStringCompleted(this, new GetDecryptedStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/SendEmails", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendEmails(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id) {
            object[] results = this.Invoke("SendEmails", new object[] {
                        to_id,
                        from_id,
                        subject_str,
                        body_str,
                        cc_id,
                        bcc_id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmailsAsync(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id) {
            this.SendEmailsAsync(to_id, from_id, subject_str, body_str, cc_id, bcc_id, null);
        }
        
        /// <remarks/>
        public void SendEmailsAsync(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, object userState) {
            if ((this.SendEmailsOperationCompleted == null)) {
                this.SendEmailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailsOperationCompleted);
            }
            this.InvokeAsync("SendEmails", new object[] {
                        to_id,
                        from_id,
                        subject_str,
                        body_str,
                        cc_id,
                        bcc_id}, this.SendEmailsOperationCompleted, userState);
        }
        
        private void OnSendEmailsOperationCompleted(object arg) {
            if ((this.SendEmailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailsCompleted(this, new SendEmailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/SendEmailswithAttachment", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendEmailswithAttachment(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, string attachement) {
            object[] results = this.Invoke("SendEmailswithAttachment", new object[] {
                        to_id,
                        from_id,
                        subject_str,
                        body_str,
                        cc_id,
                        bcc_id,
                        attachement});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmailswithAttachmentAsync(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, string attachement) {
            this.SendEmailswithAttachmentAsync(to_id, from_id, subject_str, body_str, cc_id, bcc_id, attachement, null);
        }
        
        /// <remarks/>
        public void SendEmailswithAttachmentAsync(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, string attachement, object userState) {
            if ((this.SendEmailswithAttachmentOperationCompleted == null)) {
                this.SendEmailswithAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailswithAttachmentOperationCompleted);
            }
            this.InvokeAsync("SendEmailswithAttachment", new object[] {
                        to_id,
                        from_id,
                        subject_str,
                        body_str,
                        cc_id,
                        bcc_id,
                        attachement}, this.SendEmailswithAttachmentOperationCompleted, userState);
        }
        
        private void OnSendEmailswithAttachmentOperationCompleted(object arg) {
            if ((this.SendEmailswithAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailswithAttachmentCompleted(this, new SendEmailswithAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/SendEmailswithMultipleAttachment", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendEmailswithMultipleAttachment(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, string attachementsPathHashSeparated) {
            object[] results = this.Invoke("SendEmailswithMultipleAttachment", new object[] {
                        to_id,
                        from_id,
                        subject_str,
                        body_str,
                        cc_id,
                        bcc_id,
                        attachementsPathHashSeparated});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmailswithMultipleAttachmentAsync(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, string attachementsPathHashSeparated) {
            this.SendEmailswithMultipleAttachmentAsync(to_id, from_id, subject_str, body_str, cc_id, bcc_id, attachementsPathHashSeparated, null);
        }
        
        /// <remarks/>
        public void SendEmailswithMultipleAttachmentAsync(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, string attachementsPathHashSeparated, object userState) {
            if ((this.SendEmailswithMultipleAttachmentOperationCompleted == null)) {
                this.SendEmailswithMultipleAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailswithMultipleAttachmentOperationCompleted);
            }
            this.InvokeAsync("SendEmailswithMultipleAttachment", new object[] {
                        to_id,
                        from_id,
                        subject_str,
                        body_str,
                        cc_id,
                        bcc_id,
                        attachementsPathHashSeparated}, this.SendEmailswithMultipleAttachmentOperationCompleted, userState);
        }
        
        private void OnSendEmailswithMultipleAttachmentOperationCompleted(object arg) {
            if ((this.SendEmailswithMultipleAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailswithMultipleAttachmentCompleted(this, new SendEmailswithMultipleAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/checkholiday", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string checkholiday(System.DateTime str) {
            object[] results = this.Invoke("checkholiday", new object[] {
                        str});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkholidayAsync(System.DateTime str) {
            this.checkholidayAsync(str, null);
        }
        
        /// <remarks/>
        public void checkholidayAsync(System.DateTime str, object userState) {
            if ((this.checkholidayOperationCompleted == null)) {
                this.checkholidayOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckholidayOperationCompleted);
            }
            this.InvokeAsync("checkholiday", new object[] {
                        str}, this.checkholidayOperationCompleted, userState);
        }
        
        private void OncheckholidayOperationCompleted(object arg) {
            if ((this.checkholidayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkholidayCompleted(this, new checkholidayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/add_working_days", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime add_working_days(System.DateTime str, int day) {
            object[] results = this.Invoke("add_working_days", new object[] {
                        str,
                        day});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void add_working_daysAsync(System.DateTime str, int day) {
            this.add_working_daysAsync(str, day, null);
        }
        
        /// <remarks/>
        public void add_working_daysAsync(System.DateTime str, int day, object userState) {
            if ((this.add_working_daysOperationCompleted == null)) {
                this.add_working_daysOperationCompleted = new System.Threading.SendOrPostCallback(this.Onadd_working_daysOperationCompleted);
            }
            this.InvokeAsync("add_working_days", new object[] {
                        str,
                        day}, this.add_working_daysOperationCompleted, userState);
        }
        
        private void Onadd_working_daysOperationCompleted(object arg) {
            if ((this.add_working_daysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.add_working_daysCompleted(this, new add_working_daysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/GET_Mail_DEPT_DESG", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GET_Mail_DEPT_DESG(string displayname) {
            object[] results = this.Invoke("GET_Mail_DEPT_DESG", new object[] {
                        displayname});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GET_Mail_DEPT_DESGAsync(string displayname) {
            this.GET_Mail_DEPT_DESGAsync(displayname, null);
        }
        
        /// <remarks/>
        public void GET_Mail_DEPT_DESGAsync(string displayname, object userState) {
            if ((this.GET_Mail_DEPT_DESGOperationCompleted == null)) {
                this.GET_Mail_DEPT_DESGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGET_Mail_DEPT_DESGOperationCompleted);
            }
            this.InvokeAsync("GET_Mail_DEPT_DESG", new object[] {
                        displayname}, this.GET_Mail_DEPT_DESGOperationCompleted, userState);
        }
        
        private void OnGET_Mail_DEPT_DESGOperationCompleted(object arg) {
            if ((this.GET_Mail_DEPT_DESGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GET_Mail_DEPT_DESGCompleted(this, new GET_Mail_DEPT_DESGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/getEmpidNameDeptDesg", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getEmpidNameDeptDesg(string username) {
            object[] results = this.Invoke("getEmpidNameDeptDesg", new object[] {
                        username});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getEmpidNameDeptDesgAsync(string username) {
            this.getEmpidNameDeptDesgAsync(username, null);
        }
        
        /// <remarks/>
        public void getEmpidNameDeptDesgAsync(string username, object userState) {
            if ((this.getEmpidNameDeptDesgOperationCompleted == null)) {
                this.getEmpidNameDeptDesgOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmpidNameDeptDesgOperationCompleted);
            }
            this.InvokeAsync("getEmpidNameDeptDesg", new object[] {
                        username}, this.getEmpidNameDeptDesgOperationCompleted, userState);
        }
        
        private void OngetEmpidNameDeptDesgOperationCompleted(object arg) {
            if ((this.getEmpidNameDeptDesgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmpidNameDeptDesgCompleted(this, new getEmpidNameDeptDesgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/getEmpid", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getEmpid(string username) {
            object[] results = this.Invoke("getEmpid", new object[] {
                        username});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getEmpidAsync(string username) {
            this.getEmpidAsync(username, null);
        }
        
        /// <remarks/>
        public void getEmpidAsync(string username, object userState) {
            if ((this.getEmpidOperationCompleted == null)) {
                this.getEmpidOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmpidOperationCompleted);
            }
            this.InvokeAsync("getEmpid", new object[] {
                        username}, this.getEmpidOperationCompleted, userState);
        }
        
        private void OngetEmpidOperationCompleted(object arg) {
            if ((this.getEmpidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmpidCompleted(this, new getEmpidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/getUsername_onEmpID", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getUsername_onEmpID(string empid) {
            object[] results = this.Invoke("getUsername_onEmpID", new object[] {
                        empid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUsername_onEmpIDAsync(string empid) {
            this.getUsername_onEmpIDAsync(empid, null);
        }
        
        /// <remarks/>
        public void getUsername_onEmpIDAsync(string empid, object userState) {
            if ((this.getUsername_onEmpIDOperationCompleted == null)) {
                this.getUsername_onEmpIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsername_onEmpIDOperationCompleted);
            }
            this.InvokeAsync("getUsername_onEmpID", new object[] {
                        empid}, this.getUsername_onEmpIDOperationCompleted, userState);
        }
        
        private void OngetUsername_onEmpIDOperationCompleted(object arg) {
            if ((this.getUsername_onEmpIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsername_onEmpIDCompleted(this, new getUsername_onEmpIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Get_CompanyName", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Get_CompanyName() {
            object[] results = this.Invoke("Get_CompanyName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Get_CompanyNameAsync() {
            this.Get_CompanyNameAsync(null);
        }
        
        /// <remarks/>
        public void Get_CompanyNameAsync(object userState) {
            if ((this.Get_CompanyNameOperationCompleted == null)) {
                this.Get_CompanyNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_CompanyNameOperationCompleted);
            }
            this.InvokeAsync("Get_CompanyName", new object[0], this.Get_CompanyNameOperationCompleted, userState);
        }
        
        private void OnGet_CompanyNameOperationCompleted(object arg) {
            if ((this.Get_CompanyNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_CompanyNameCompleted(this, new Get_CompanyNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Get_CompanyShortName", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Get_CompanyShortName() {
            object[] results = this.Invoke("Get_CompanyShortName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Get_CompanyShortNameAsync() {
            this.Get_CompanyShortNameAsync(null);
        }
        
        /// <remarks/>
        public void Get_CompanyShortNameAsync(object userState) {
            if ((this.Get_CompanyShortNameOperationCompleted == null)) {
                this.Get_CompanyShortNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_CompanyShortNameOperationCompleted);
            }
            this.InvokeAsync("Get_CompanyShortName", new object[0], this.Get_CompanyShortNameOperationCompleted, userState);
        }
        
        private void OnGet_CompanyShortNameOperationCompleted(object arg) {
            if ((this.Get_CompanyShortNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_CompanyShortNameCompleted(this, new Get_CompanyShortNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Get_Domain", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Get_Domain() {
            object[] results = this.Invoke("Get_Domain", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Get_DomainAsync() {
            this.Get_DomainAsync(null);
        }
        
        /// <remarks/>
        public void Get_DomainAsync(object userState) {
            if ((this.Get_DomainOperationCompleted == null)) {
                this.Get_DomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_DomainOperationCompleted);
            }
            this.InvokeAsync("Get_Domain", new object[0], this.Get_DomainOperationCompleted, userState);
        }
        
        private void OnGet_DomainOperationCompleted(object arg) {
            if ((this.Get_DomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_DomainCompleted(this, new Get_DomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Get_Company_Logo", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Get_Company_Logo(string pathtype) {
            object[] results = this.Invoke("Get_Company_Logo", new object[] {
                        pathtype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Get_Company_LogoAsync(string pathtype) {
            this.Get_Company_LogoAsync(pathtype, null);
        }
        
        /// <remarks/>
        public void Get_Company_LogoAsync(string pathtype, object userState) {
            if ((this.Get_Company_LogoOperationCompleted == null)) {
                this.Get_Company_LogoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_Company_LogoOperationCompleted);
            }
            this.InvokeAsync("Get_Company_Logo", new object[] {
                        pathtype}, this.Get_Company_LogoOperationCompleted, userState);
        }
        
        private void OnGet_Company_LogoOperationCompleted(object arg) {
            if ((this.Get_Company_LogoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_Company_LogoCompleted(this, new Get_Company_LogoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Get_Company_Pic", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Get_Company_Pic(string pathtype) {
            object[] results = this.Invoke("Get_Company_Pic", new object[] {
                        pathtype});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Get_Company_PicAsync(string pathtype) {
            this.Get_Company_PicAsync(pathtype, null);
        }
        
        /// <remarks/>
        public void Get_Company_PicAsync(string pathtype, object userState) {
            if ((this.Get_Company_PicOperationCompleted == null)) {
                this.Get_Company_PicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_Company_PicOperationCompleted);
            }
            this.InvokeAsync("Get_Company_Pic", new object[] {
                        pathtype}, this.Get_Company_PicOperationCompleted, userState);
        }
        
        private void OnGet_Company_PicOperationCompleted(object arg) {
            if ((this.Get_Company_PicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_Company_PicCompleted(this, new Get_Company_PicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Datatable2HTMLtable_new", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Datatable2HTMLtable_new(string constr, string querystr) {
            object[] results = this.Invoke("Datatable2HTMLtable_new", new object[] {
                        constr,
                        querystr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Datatable2HTMLtable_newAsync(string constr, string querystr) {
            this.Datatable2HTMLtable_newAsync(constr, querystr, null);
        }
        
        /// <remarks/>
        public void Datatable2HTMLtable_newAsync(string constr, string querystr, object userState) {
            if ((this.Datatable2HTMLtable_newOperationCompleted == null)) {
                this.Datatable2HTMLtable_newOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDatatable2HTMLtable_newOperationCompleted);
            }
            this.InvokeAsync("Datatable2HTMLtable_new", new object[] {
                        constr,
                        querystr}, this.Datatable2HTMLtable_newOperationCompleted, userState);
        }
        
        private void OnDatatable2HTMLtable_newOperationCompleted(object arg) {
            if ((this.Datatable2HTMLtable_newCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Datatable2HTMLtable_newCompleted(this, new Datatable2HTMLtable_newCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Encryption64", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Encryption64(string str) {
            object[] results = this.Invoke("Encryption64", new object[] {
                        str});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Encryption64Async(string str) {
            this.Encryption64Async(str, null);
        }
        
        /// <remarks/>
        public void Encryption64Async(string str, object userState) {
            if ((this.Encryption64OperationCompleted == null)) {
                this.Encryption64OperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryption64OperationCompleted);
            }
            this.InvokeAsync("Encryption64", new object[] {
                        str}, this.Encryption64OperationCompleted, userState);
        }
        
        private void OnEncryption64OperationCompleted(object arg) {
            if ((this.Encryption64Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Encryption64Completed(this, new Encryption64CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Decryption64", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Decryption64(string str) {
            object[] results = this.Invoke("Decryption64", new object[] {
                        str});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Decryption64Async(string str) {
            this.Decryption64Async(str, null);
        }
        
        /// <remarks/>
        public void Decryption64Async(string str, object userState) {
            if ((this.Decryption64OperationCompleted == null)) {
                this.Decryption64OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecryption64OperationCompleted);
            }
            this.InvokeAsync("Decryption64", new object[] {
                        str}, this.Decryption64OperationCompleted, userState);
        }
        
        private void OnDecryption64OperationCompleted(object arg) {
            if ((this.Decryption64Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Decryption64Completed(this, new Decryption64CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Get_FinancialYear", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Get_FinancialYear() {
            object[] results = this.Invoke("Get_FinancialYear", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Get_FinancialYearAsync() {
            this.Get_FinancialYearAsync(null);
        }
        
        /// <remarks/>
        public void Get_FinancialYearAsync(object userState) {
            if ((this.Get_FinancialYearOperationCompleted == null)) {
                this.Get_FinancialYearOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_FinancialYearOperationCompleted);
            }
            this.InvokeAsync("Get_FinancialYear", new object[0], this.Get_FinancialYearOperationCompleted, userState);
        }
        
        private void OnGet_FinancialYearOperationCompleted(object arg) {
            if ((this.Get_FinancialYearCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_FinancialYearCompleted(this, new Get_FinancialYearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Get_Email", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Get_Email(string username) {
            object[] results = this.Invoke("Get_Email", new object[] {
                        username});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Get_EmailAsync(string username) {
            this.Get_EmailAsync(username, null);
        }
        
        /// <remarks/>
        public void Get_EmailAsync(string username, object userState) {
            if ((this.Get_EmailOperationCompleted == null)) {
                this.Get_EmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_EmailOperationCompleted);
            }
            this.InvokeAsync("Get_Email", new object[] {
                        username}, this.Get_EmailOperationCompleted, userState);
        }
        
        private void OnGet_EmailOperationCompleted(object arg) {
            if ((this.Get_EmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_EmailCompleted(this, new Get_EmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Get_Username", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Get_Username(string emailid) {
            object[] results = this.Invoke("Get_Username", new object[] {
                        emailid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Get_UsernameAsync(string emailid) {
            this.Get_UsernameAsync(emailid, null);
        }
        
        /// <remarks/>
        public void Get_UsernameAsync(string emailid, object userState) {
            if ((this.Get_UsernameOperationCompleted == null)) {
                this.Get_UsernameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_UsernameOperationCompleted);
            }
            this.InvokeAsync("Get_Username", new object[] {
                        emailid}, this.Get_UsernameOperationCompleted, userState);
        }
        
        private void OnGet_UsernameOperationCompleted(object arg) {
            if ((this.Get_UsernameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_UsernameCompleted(this, new Get_UsernameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Get_Server_date", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Get_Server_date() {
            object[] results = this.Invoke("Get_Server_date", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Get_Server_dateAsync() {
            this.Get_Server_dateAsync(null);
        }
        
        /// <remarks/>
        public void Get_Server_dateAsync(object userState) {
            if ((this.Get_Server_dateOperationCompleted == null)) {
                this.Get_Server_dateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_Server_dateOperationCompleted);
            }
            this.InvokeAsync("Get_Server_date", new object[0], this.Get_Server_dateOperationCompleted, userState);
        }
        
        private void OnGet_Server_dateOperationCompleted(object arg) {
            if ((this.Get_Server_dateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_Server_dateCompleted(this, new Get_Server_dateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/AD_GetReportingManager", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AD_GetReportingManager(string DisplayName) {
            object[] results = this.Invoke("AD_GetReportingManager", new object[] {
                        DisplayName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AD_GetReportingManagerAsync(string DisplayName) {
            this.AD_GetReportingManagerAsync(DisplayName, null);
        }
        
        /// <remarks/>
        public void AD_GetReportingManagerAsync(string DisplayName, object userState) {
            if ((this.AD_GetReportingManagerOperationCompleted == null)) {
                this.AD_GetReportingManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAD_GetReportingManagerOperationCompleted);
            }
            this.InvokeAsync("AD_GetReportingManager", new object[] {
                        DisplayName}, this.AD_GetReportingManagerOperationCompleted, userState);
        }
        
        private void OnAD_GetReportingManagerOperationCompleted(object arg) {
            if ((this.AD_GetReportingManagerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AD_GetReportingManagerCompleted(this, new AD_GetReportingManagerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Get_Display_Email_Mobile_AD", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Get_Display_Email_Mobile_AD(string username) {
            object[] results = this.Invoke("Get_Display_Email_Mobile_AD", new object[] {
                        username});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Get_Display_Email_Mobile_ADAsync(string username) {
            this.Get_Display_Email_Mobile_ADAsync(username, null);
        }
        
        /// <remarks/>
        public void Get_Display_Email_Mobile_ADAsync(string username, object userState) {
            if ((this.Get_Display_Email_Mobile_ADOperationCompleted == null)) {
                this.Get_Display_Email_Mobile_ADOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_Display_Email_Mobile_ADOperationCompleted);
            }
            this.InvokeAsync("Get_Display_Email_Mobile_AD", new object[] {
                        username}, this.Get_Display_Email_Mobile_ADOperationCompleted, userState);
        }
        
        private void OnGet_Display_Email_Mobile_ADOperationCompleted(object arg) {
            if ((this.Get_Display_Email_Mobile_ADCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_Display_Email_Mobile_ADCompleted(this, new Get_Display_Email_Mobile_ADCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/SendEmailswithAttachment_Priority", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendEmailswithAttachment_Priority(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, string attachement, string priority) {
            object[] results = this.Invoke("SendEmailswithAttachment_Priority", new object[] {
                        to_id,
                        from_id,
                        subject_str,
                        body_str,
                        cc_id,
                        bcc_id,
                        attachement,
                        priority});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmailswithAttachment_PriorityAsync(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, string attachement, string priority) {
            this.SendEmailswithAttachment_PriorityAsync(to_id, from_id, subject_str, body_str, cc_id, bcc_id, attachement, priority, null);
        }
        
        /// <remarks/>
        public void SendEmailswithAttachment_PriorityAsync(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, string attachement, string priority, object userState) {
            if ((this.SendEmailswithAttachment_PriorityOperationCompleted == null)) {
                this.SendEmailswithAttachment_PriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailswithAttachment_PriorityOperationCompleted);
            }
            this.InvokeAsync("SendEmailswithAttachment_Priority", new object[] {
                        to_id,
                        from_id,
                        subject_str,
                        body_str,
                        cc_id,
                        bcc_id,
                        attachement,
                        priority}, this.SendEmailswithAttachment_PriorityOperationCompleted, userState);
        }
        
        private void OnSendEmailswithAttachment_PriorityOperationCompleted(object arg) {
            if ((this.SendEmailswithAttachment_PriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailswithAttachment_PriorityCompleted(this, new SendEmailswithAttachment_PriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/SendEmails_Priority", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendEmails_Priority(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, string priority) {
            object[] results = this.Invoke("SendEmails_Priority", new object[] {
                        to_id,
                        from_id,
                        subject_str,
                        body_str,
                        cc_id,
                        bcc_id,
                        priority});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmails_PriorityAsync(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, string priority) {
            this.SendEmails_PriorityAsync(to_id, from_id, subject_str, body_str, cc_id, bcc_id, priority, null);
        }
        
        /// <remarks/>
        public void SendEmails_PriorityAsync(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, string priority, object userState) {
            if ((this.SendEmails_PriorityOperationCompleted == null)) {
                this.SendEmails_PriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmails_PriorityOperationCompleted);
            }
            this.InvokeAsync("SendEmails_Priority", new object[] {
                        to_id,
                        from_id,
                        subject_str,
                        body_str,
                        cc_id,
                        bcc_id,
                        priority}, this.SendEmails_PriorityOperationCompleted, userState);
        }
        
        private void OnSendEmails_PriorityOperationCompleted(object arg) {
            if ((this.SendEmails_PriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmails_PriorityCompleted(this, new SendEmails_PriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/CheckHolidayonDate", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckHolidayonDate(string datetocheck) {
            object[] results = this.Invoke("CheckHolidayonDate", new object[] {
                        datetocheck});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckHolidayonDateAsync(string datetocheck) {
            this.CheckHolidayonDateAsync(datetocheck, null);
        }
        
        /// <remarks/>
        public void CheckHolidayonDateAsync(string datetocheck, object userState) {
            if ((this.CheckHolidayonDateOperationCompleted == null)) {
                this.CheckHolidayonDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckHolidayonDateOperationCompleted);
            }
            this.InvokeAsync("CheckHolidayonDate", new object[] {
                        datetocheck}, this.CheckHolidayonDateOperationCompleted, userState);
        }
        
        private void OnCheckHolidayonDateOperationCompleted(object arg) {
            if ((this.CheckHolidayonDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckHolidayonDateCompleted(this, new CheckHolidayonDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/SendTrainingRequest", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendTrainingRequest(string RequiredAttendees, string OptionalAttendees, string subject_str, string body_str, string meeting_start_time, string meeting_end_time, string meeting_location) {
            object[] results = this.Invoke("SendTrainingRequest", new object[] {
                        RequiredAttendees,
                        OptionalAttendees,
                        subject_str,
                        body_str,
                        meeting_start_time,
                        meeting_end_time,
                        meeting_location});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendTrainingRequestAsync(string RequiredAttendees, string OptionalAttendees, string subject_str, string body_str, string meeting_start_time, string meeting_end_time, string meeting_location) {
            this.SendTrainingRequestAsync(RequiredAttendees, OptionalAttendees, subject_str, body_str, meeting_start_time, meeting_end_time, meeting_location, null);
        }
        
        /// <remarks/>
        public void SendTrainingRequestAsync(string RequiredAttendees, string OptionalAttendees, string subject_str, string body_str, string meeting_start_time, string meeting_end_time, string meeting_location, object userState) {
            if ((this.SendTrainingRequestOperationCompleted == null)) {
                this.SendTrainingRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendTrainingRequestOperationCompleted);
            }
            this.InvokeAsync("SendTrainingRequest", new object[] {
                        RequiredAttendees,
                        OptionalAttendees,
                        subject_str,
                        body_str,
                        meeting_start_time,
                        meeting_end_time,
                        meeting_location}, this.SendTrainingRequestOperationCompleted, userState);
        }
        
        private void OnSendTrainingRequestOperationCompleted(object arg) {
            if ((this.SendTrainingRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendTrainingRequestCompleted(this, new SendTrainingRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/SendMeetingRequest", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMeetingRequest(string RequiredAttendees, string OptionalAttendees, string subject_str, string body_str, string meeting_start_time, string meeting_end_time, string meeting_location) {
            object[] results = this.Invoke("SendMeetingRequest", new object[] {
                        RequiredAttendees,
                        OptionalAttendees,
                        subject_str,
                        body_str,
                        meeting_start_time,
                        meeting_end_time,
                        meeting_location});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMeetingRequestAsync(string RequiredAttendees, string OptionalAttendees, string subject_str, string body_str, string meeting_start_time, string meeting_end_time, string meeting_location) {
            this.SendMeetingRequestAsync(RequiredAttendees, OptionalAttendees, subject_str, body_str, meeting_start_time, meeting_end_time, meeting_location, null);
        }
        
        /// <remarks/>
        public void SendMeetingRequestAsync(string RequiredAttendees, string OptionalAttendees, string subject_str, string body_str, string meeting_start_time, string meeting_end_time, string meeting_location, object userState) {
            if ((this.SendMeetingRequestOperationCompleted == null)) {
                this.SendMeetingRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMeetingRequestOperationCompleted);
            }
            this.InvokeAsync("SendMeetingRequest", new object[] {
                        RequiredAttendees,
                        OptionalAttendees,
                        subject_str,
                        body_str,
                        meeting_start_time,
                        meeting_end_time,
                        meeting_location}, this.SendMeetingRequestOperationCompleted, userState);
        }
        
        private void OnSendMeetingRequestOperationCompleted(object arg) {
            if ((this.SendMeetingRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMeetingRequestCompleted(this, new SendMeetingRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/CheckDisplayName", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckDisplayName(string displayname) {
            object[] results = this.Invoke("CheckDisplayName", new object[] {
                        displayname});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDisplayNameAsync(string displayname) {
            this.CheckDisplayNameAsync(displayname, null);
        }
        
        /// <remarks/>
        public void CheckDisplayNameAsync(string displayname, object userState) {
            if ((this.CheckDisplayNameOperationCompleted == null)) {
                this.CheckDisplayNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDisplayNameOperationCompleted);
            }
            this.InvokeAsync("CheckDisplayName", new object[] {
                        displayname}, this.CheckDisplayNameOperationCompleted, userState);
        }
        
        private void OnCheckDisplayNameOperationCompleted(object arg) {
            if ((this.CheckDisplayNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDisplayNameCompleted(this, new CheckDisplayNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/SendEmails_Testing_Infra", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendEmails_Testing_Infra(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id) {
            object[] results = this.Invoke("SendEmails_Testing_Infra", new object[] {
                        to_id,
                        from_id,
                        subject_str,
                        body_str,
                        cc_id,
                        bcc_id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmails_Testing_InfraAsync(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id) {
            this.SendEmails_Testing_InfraAsync(to_id, from_id, subject_str, body_str, cc_id, bcc_id, null);
        }
        
        /// <remarks/>
        public void SendEmails_Testing_InfraAsync(string to_id, string from_id, string subject_str, string body_str, string cc_id, string bcc_id, object userState) {
            if ((this.SendEmails_Testing_InfraOperationCompleted == null)) {
                this.SendEmails_Testing_InfraOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmails_Testing_InfraOperationCompleted);
            }
            this.InvokeAsync("SendEmails_Testing_Infra", new object[] {
                        to_id,
                        from_id,
                        subject_str,
                        body_str,
                        cc_id,
                        bcc_id}, this.SendEmails_Testing_InfraOperationCompleted, userState);
        }
        
        private void OnSendEmails_Testing_InfraOperationCompleted(object arg) {
            if ((this.SendEmails_Testing_InfraCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmails_Testing_InfraCompleted(this, new SendEmails_Testing_InfraCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/Update_Application_Hits", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Update_Application_Hits(string Application_Name, string IP_Address, string HitBy_User_ID, string Sub_Type) {
            object[] results = this.Invoke("Update_Application_Hits", new object[] {
                        Application_Name,
                        IP_Address,
                        HitBy_User_ID,
                        Sub_Type});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Update_Application_HitsAsync(string Application_Name, string IP_Address, string HitBy_User_ID, string Sub_Type) {
            this.Update_Application_HitsAsync(Application_Name, IP_Address, HitBy_User_ID, Sub_Type, null);
        }
        
        /// <remarks/>
        public void Update_Application_HitsAsync(string Application_Name, string IP_Address, string HitBy_User_ID, string Sub_Type, object userState) {
            if ((this.Update_Application_HitsOperationCompleted == null)) {
                this.Update_Application_HitsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate_Application_HitsOperationCompleted);
            }
            this.InvokeAsync("Update_Application_Hits", new object[] {
                        Application_Name,
                        IP_Address,
                        HitBy_User_ID,
                        Sub_Type}, this.Update_Application_HitsOperationCompleted, userState);
        }
        
        private void OnUpdate_Application_HitsOperationCompleted(object arg) {
            if ((this.Update_Application_HitsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update_Application_HitsCompleted(this, new Update_Application_HitsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/getHOGdetails", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getHOGdetails(string empid) {
            object[] results = this.Invoke("getHOGdetails", new object[] {
                        empid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getHOGdetailsAsync(string empid) {
            this.getHOGdetailsAsync(empid, null);
        }
        
        /// <remarks/>
        public void getHOGdetailsAsync(string empid, object userState) {
            if ((this.getHOGdetailsOperationCompleted == null)) {
                this.getHOGdetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHOGdetailsOperationCompleted);
            }
            this.InvokeAsync("getHOGdetails", new object[] {
                        empid}, this.getHOGdetailsOperationCompleted, userState);
        }
        
        private void OngetHOGdetailsOperationCompleted(object arg) {
            if ((this.getHOGdetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHOGdetailsCompleted(this, new getHOGdetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NDPL WebService/AD_ReportingMGRDetails_UserID", RequestNamespace="NDPL WebService", ResponseNamespace="NDPL WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AD_ReportingMGRDetails_UserID(string username) {
            object[] results = this.Invoke("AD_ReportingMGRDetails_UserID", new object[] {
                        username});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AD_ReportingMGRDetails_UserIDAsync(string username) {
            this.AD_ReportingMGRDetails_UserIDAsync(username, null);
        }
        
        /// <remarks/>
        public void AD_ReportingMGRDetails_UserIDAsync(string username, object userState) {
            if ((this.AD_ReportingMGRDetails_UserIDOperationCompleted == null)) {
                this.AD_ReportingMGRDetails_UserIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAD_ReportingMGRDetails_UserIDOperationCompleted);
            }
            this.InvokeAsync("AD_ReportingMGRDetails_UserID", new object[] {
                        username}, this.AD_ReportingMGRDetails_UserIDOperationCompleted, userState);
        }
        
        private void OnAD_ReportingMGRDetails_UserIDOperationCompleted(object arg) {
            if ((this.AD_ReportingMGRDetails_UserIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AD_ReportingMGRDetails_UserIDCompleted(this, new AD_ReportingMGRDetails_UserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetClientIPAddressCompletedEventHandler(object sender, GetClientIPAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientIPAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientIPAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetDisplayNamefromActiveDirectoryCompletedEventHandler(object sender, GetDisplayNamefromActiveDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDisplayNamefromActiveDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDisplayNamefromActiveDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetAuthenticationfromActiveDirectoryCompletedEventHandler(object sender, GetAuthenticationfromActiveDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthenticationfromActiveDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthenticationfromActiveDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetAuthenticationfromActiveDirectory_testCompletedEventHandler(object sender, GetAuthenticationfromActiveDirectory_testCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthenticationfromActiveDirectory_testCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthenticationfromActiveDirectory_testCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetEncryptedStringCompletedEventHandler(object sender, GetEncryptedStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEncryptedStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEncryptedStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetDecryptedStringCompletedEventHandler(object sender, GetDecryptedStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDecryptedStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDecryptedStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendEmailsCompletedEventHandler(object sender, SendEmailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendEmailswithAttachmentCompletedEventHandler(object sender, SendEmailswithAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmailswithAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmailswithAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendEmailswithMultipleAttachmentCompletedEventHandler(object sender, SendEmailswithMultipleAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmailswithMultipleAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmailswithMultipleAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void checkholidayCompletedEventHandler(object sender, checkholidayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkholidayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkholidayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void add_working_daysCompletedEventHandler(object sender, add_working_daysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class add_working_daysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal add_working_daysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GET_Mail_DEPT_DESGCompletedEventHandler(object sender, GET_Mail_DEPT_DESGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GET_Mail_DEPT_DESGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GET_Mail_DEPT_DESGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmpidNameDeptDesgCompletedEventHandler(object sender, getEmpidNameDeptDesgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmpidNameDeptDesgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmpidNameDeptDesgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getEmpidCompletedEventHandler(object sender, getEmpidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmpidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmpidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getUsername_onEmpIDCompletedEventHandler(object sender, getUsername_onEmpIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUsername_onEmpIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsername_onEmpIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_CompanyNameCompletedEventHandler(object sender, Get_CompanyNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_CompanyNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_CompanyNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_CompanyShortNameCompletedEventHandler(object sender, Get_CompanyShortNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_CompanyShortNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_CompanyShortNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_DomainCompletedEventHandler(object sender, Get_DomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_DomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_DomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_Company_LogoCompletedEventHandler(object sender, Get_Company_LogoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_Company_LogoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_Company_LogoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_Company_PicCompletedEventHandler(object sender, Get_Company_PicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_Company_PicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_Company_PicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Datatable2HTMLtable_newCompletedEventHandler(object sender, Datatable2HTMLtable_newCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Datatable2HTMLtable_newCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Datatable2HTMLtable_newCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Encryption64CompletedEventHandler(object sender, Encryption64CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Encryption64CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Encryption64CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Decryption64CompletedEventHandler(object sender, Decryption64CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Decryption64CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Decryption64CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_FinancialYearCompletedEventHandler(object sender, Get_FinancialYearCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_FinancialYearCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_FinancialYearCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_EmailCompletedEventHandler(object sender, Get_EmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_EmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_EmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_UsernameCompletedEventHandler(object sender, Get_UsernameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_UsernameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_UsernameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_Server_dateCompletedEventHandler(object sender, Get_Server_dateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_Server_dateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_Server_dateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AD_GetReportingManagerCompletedEventHandler(object sender, AD_GetReportingManagerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AD_GetReportingManagerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AD_GetReportingManagerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_Display_Email_Mobile_ADCompletedEventHandler(object sender, Get_Display_Email_Mobile_ADCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_Display_Email_Mobile_ADCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_Display_Email_Mobile_ADCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendEmailswithAttachment_PriorityCompletedEventHandler(object sender, SendEmailswithAttachment_PriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmailswithAttachment_PriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmailswithAttachment_PriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendEmails_PriorityCompletedEventHandler(object sender, SendEmails_PriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmails_PriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmails_PriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckHolidayonDateCompletedEventHandler(object sender, CheckHolidayonDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckHolidayonDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckHolidayonDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendTrainingRequestCompletedEventHandler(object sender, SendTrainingRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendTrainingRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendTrainingRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendMeetingRequestCompletedEventHandler(object sender, SendMeetingRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMeetingRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMeetingRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckDisplayNameCompletedEventHandler(object sender, CheckDisplayNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDisplayNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDisplayNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendEmails_Testing_InfraCompletedEventHandler(object sender, SendEmails_Testing_InfraCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmails_Testing_InfraCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmails_Testing_InfraCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Update_Application_HitsCompletedEventHandler(object sender, Update_Application_HitsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update_Application_HitsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update_Application_HitsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getHOGdetailsCompletedEventHandler(object sender, getHOGdetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHOGdetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHOGdetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AD_ReportingMGRDetails_UserIDCompletedEventHandler(object sender, AD_ReportingMGRDetails_UserIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AD_ReportingMGRDetails_UserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AD_ReportingMGRDetails_UserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591